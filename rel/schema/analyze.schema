%%----------------------------------------------------------------------
%% Node info
%%----------------------------------------------------------------------

{mapping, "nodename", "vm_args.-name", [
          {default, "{{ app }}@127.0.0.1"}
]}.

{mapping, "distributed_cookie", "vm_args.-setcookie", [
          {default, "{{ app }}secretcookie"}
]}.

{mapping, "node.smp", "vm_args.-smp", [
          {default, auto},
          {datatype, {enum, [enable, auto, disable]}},
          hidden
]}.

{mapping, "node.heartbeat", "vm_args.-heart", [
          {datatype, flag},
          hidden
]}.

{translation, "vm_args.-heart", fun(Conf) ->
              case cuttlefish:conf_get("node.heartbeat", Conf) of
                   true -> "";
                   false -> cuttlefish:invalid("should be 'on' or comment the line!")
              end
end}.

{mapping, "node.kernel_poll", "vm_args.+K", [
          {default, on},
          {datatype, flag},
          hidden
]}.


{mapping, "node.async_threads", "vm_args.+A", [
          {default, 64},
          {datatype, integer},
          {validators, ["range:0-1024"]}
]}.

{mapping, "node.process_limit", "vm_args.+P", [
          {datatype, integer},
          {default, 256000},
          hidden
]}.

{mapping, "node.crash_dump", "vm_args.-env ERL_CRASH_DUMP", [
          {default, "{{crash_dump}}"},
          {datatype, file},
          hidden
]}.

{mapping, "node.fullsweep_after", "vm_args.-env ERL_FULLSWEEP_AFTER", [
          {default, 1000},
          {datatype, integer},
          hidden,
          {validators, ["positive_integer"]}
]}.

{validator, "positive_integer", "must be a positive integer",
            fun(X) -> X >= 0 
end}.

%%----------------------------------------------------------------------
%% Log
%%----------------------------------------------------------------------

{mapping, "log.dir", "lager.log_dir", [
          {default, "log"},
          {datatype, string}
]}.

{mapping, "log.console", "lager.handlers", [
          {default, file},
          {datatype, {enum, [off, file, console, both]}}
]}.

{mapping, "log.console.level", "lager.handlers", [
          {default, info},
          {datatype, {enum, [debug, info, notice, warning, error, critical, alert, emergency, none]}}
]}.

{mapping, "log.console.file", "lager.handlers", [
          {default, "log/console.log"},
          {datatype, file}
]}.

{mapping, "log.error.file", "lager.handlers", [
          {default, "log/error.log"},
          {datatype, file}
]}.

{mapping, "log.syslog", "lager.handlers", [
          {default, off},
          {datatype, flag}
]}.

{mapping, "log.syslog.identity", "lager.handlers", [
          {default, "{{app}}"},
          {datatype, string}
]}.

{mapping, "log.syslog.facility", "lager.handlers", [
          {default, local0},
          {datatype, {enum, [daemon, local0, local1, local2, local3, local4, local5, local6, local7]}}
]}.

{mapping, "log.syslog.level", "lager.handlers", [
          {default, error},
          {datatype, {enum, [debug, info, notice, warning, error, critical, alert, emergency]}}
]}.

{mapping, "log.error.redirect", "lager.error_logger.redirect", [
          {default, on},
          {datatype, flag},
          hidden
]}.

{mapping, "log.error.messages_per_second", "lager.error_logger_hwm", [
          {default, 1000},
          {datatype, integer},
          hidden
]}.

{translation, "lager.handlers", fun(Conf) ->
              ErrorHandler = 
                           case cuttlefish:conf_get("log.error.file", Conf) of
                                undefined -> []; 
                                ErrorFileName ->
                                              [{lager_file_backend, [
                                                                    {file, ErrorFileName},
                                                                    {level, error},
                                                                    {size, 10485760},
                                                                    {date, "$D0"},
                                                                    {count, 5}     
                                              ]}]
                           end,
              ConsoleLogLevel = cuttlefish:conf_get("log.console.level", Conf),
              ConsoleLogFile = cuttlefish:conf_get("log.console.file", Conf),
              
              ConsoleHandler = {lager_console_backend, ConsoleLogLevel},
              ConsoleFileHandler = {lager_file_backend, [
                                                        {file, ConsoleLogFile},
                                                        {level, ConsoleLogLevel},
                                                        {size, 10485760},
                                                        {data, "$D0"},
                                                        {count, 5}        
                                                        ]},
              
              ConsoleHandlers = 
                              case cuttlefish:conf_get("log.console", Conf) of
                                   off -> [];
                                   file -> [ConsoleFileHandler];
                                   console -> [ConsoleHandler];
                                   both -> [ConsoleHandler, ConsoleFileHandler];
                                   _ -> []
                              end,
              
              SyslogHandler = 
                            case cuttlefish:conf_get("log.syslog", Conf) of 
                                 false -> [];
                                 true ->
                                      [{lager_syslog_backend, [
                                                              cuttlefish:conf_get("log.syslog.identity", Conf),
                                                              cuttlefish:conf_get("log.syslog.facility", Conf),
                                                              cuttlefish:conf_get("log.syslog.level", Conf)
                                                              ]}]
                            end,                                        

               ConsoleHandlers ++ ErrorHandler ++ SyslogHandler                                                                                                                                                                                                                   
end}.
                                              
{mapping, "log.crash", "lager.crash_log", [
          {default, on},
          {datatype, flag}
]}.

{mapping, "log.crash.file", "lager.crash_log", [
          {default, "log/crash.log"},
          {datatype, file}
]}.

{translation, "lager.crash_log", fun(Conf) ->
              case cuttlefish:conf_get("log.crash", Conf) of 
                   false -> undefined;
                   _ -> cuttlefish:conf_get("log.crash.file", Conf, "./log/crash.log")
              end
end}.

{mapping, "sasl", "sasl.sasl_error_logger", [
          {default, off},
          {datatype, flag},
          hidden
]}.


%%----------------------------------------------------------------------
%% Application
%%----------------------------------------------------------------------

%% Listeners

%% TCP

{mapping, "listener.tcp.$name", "{{app}}.listeners", [
          {datatype, [integer, ip]}
]}.

{mapping, "listener.tcp.$name.nbAcceptors", "{{app}}.listeners", [
          {default, 8},
          {datatype, integer}
]}.

{mapping, "listener.tcp.$name.transOpts.max_connections", "{{app}}.listeners", [
          {default, 1024},
          {datatype, integer},
          {validators, ["positive_integer"]}
]}.

{mapping, "listener.tcp.$name.transOpts.backlog", "{{app}}.listeners", [
          {default, 1024},
          {datatype, integer},
          {validators, ["positive_integer"]}
]}.

{mapping, "listener.tcp.$name.transOpts.nodelay", "{{app}}.listeners", [
          {default, on},
          {datatype, flag}
]}.

{mapping, "listener.tcp.$name.transOpts.send_timeout", "{{app}}.listeners", [
          {default, 30},
          {datatype, integer},
          {validators, ["positive_integer"]}
]}.

{mapping, "listener.tcp.$name.transOpts.send_timeout_close", "{{app}}.listeners", [
          {default, on},
          {datatype, flag}
]}.

%% HTTP

{mapping, "listener.http.$name", "{{app}}.listeners", [
          {datatype, [integer, ip]}
]}.

{mapping, "listener.http.$name.nbAcceptors", "{{app}}.listeners", [
          {default, 8},
          {datatype, integer}
]}.

{mapping, "listener.http.$name.transOpts.max_connections", "{{app}}.listeners", [
          {default, 1024},
          {datatype, integer},
          {validators, ["positive_integer"]}
]}.

{mapping, "listener.http.$name.transOpts.backlog", "{{app}}.listeners", [
          {default, 1024},
          {datatype, integer},
          {validators, ["positive_integer"]}
]}.

{mapping, "listener.http.$name.transOpts.nodelay", "{{app}}.listeners", [
          {default, on},
          {datatype, flag}
]}.

{mapping, "listener.http.$name.transOpts.send_timeout", "{{app}}.listeners", [
          {default, 30},
          {datatype, integer},
          {validators, ["positive_integer"]}
]}.

{mapping, "listener.http.$name.transOpts.send_timeout_close", "{{app}}.listeners", [
          {default, on},
          {datatype, flag}
]}.

{mapping, "listener.http.$name.protoOpts.request_timeout", "{{app}}.listeners", [
          {default, 30},
          {datatype, integer}
]}.

{mapping, "listener.http.$name.protoOpts.max_keepalive", "{{app}}.listeners", [
          {default, 2000},
          {datatype, integer}
]}.

{translation, "{{app}}.listeners",  fun(Conf) ->
              Filter = fun(Opts) -> [{K, V} || {K, V} <- Opts, V =/= undefined] end,
              Atom = fun(undefined) -> undefined; (S) -> list_to_atom(S) end,
              NbAcceptorsFun = fun(Prefix) -> cuttlefish:conf_get(Prefix ++ ".nbAcceptors", Conf) end,
              TransOptsFun = 
                  fun(Prefix) ->                                         
                      Prefix1 = Prefix ++ ".transOpts", 
                      MaxConnections = cuttlefish:conf_get(Prefix1 ++ ".max_connections", Conf),
                      Backlog = cuttlefish:conf_get(Prefix1 ++ ".backlog", Conf),                           
                      Nodelay = cuttlefish:conf_get(Prefix1 ++ ".nodelay", Conf),
                      SendTimeout = cuttlefish:conf_get(Prefix1 ++ ".send_timeout", Conf),
                      SendTimeoutClose = cuttlefish:conf_get(Prefix1 ++ ".send_timeout_close", Conf),                              
                      Filter([{max_connections, MaxConnections}, {backlog, Backlog}, {nodelay, Nodelay}, 
                               {send_timeout, SendTimeout*1000}, {send_timeout_close, SendTimeoutClose}])
                  end,
              ProtoOptsFun = 
                  fun(Prefix) ->
                      Prefix1 = Prefix ++ ".protoOpts",   
                      RequestTimeOut = 
                          case cuttlefish:conf_get(Prefix1 ++ ".request_timeout", Conf, undefined) of
                              undefined -> undefined;
                              Value when is_integer(Value) -> Value * 1000
                          end,           
                      MaxKeepAlive = cuttlefish:conf_get(Prefix1 ++ ".max_keepalive", Conf, undefined),
                      Filter([{request_timeout, RequestTimeOut}, {max_keepalive, MaxKeepAlive}])
                  end,
              Listeners =
                  fun(Type, Name) ->
                      Key = string:join(["listener", Type, Name], "."),
                      case cuttlefish:conf_get(Key, Conf, undefined) of
                          undefined ->
                              [];
                          Other ->
                              TransOpts = 
                                  case Other of          
                                      {Ip, Port} when is_tuple(Ip), is_integer(Port) ->
                                          [{port, Port}, {ip, Ip}];
                                      {Ip, Port} when is_list(Ip), is_integer(Port) ->
                                          {ok, Addr} = inet:getaddr(Ip, inet),
                                          [{port, Port}, {ip, Addr}];
                                      Port when is_integer(Port) ->
                                          [{port, Port}]
                                  end,
                                                        
                              NbAcceptors = NbAcceptorsFun(Key),
                              ProtoOpts = ProtoOptsFun(Key),
                              [{Atom(Type), Atom(Name), NbAcceptors, TransOpts ++ TransOptsFun(Key), ProtoOpts}]
                      end
                  end,
              lists:flatten([
                Listeners(Type, Name) || 
                    {["listener", Type, Name], _ListenOn} <- cuttlefish_variable:filter_by_prefix("listener.tcp", Conf)    
                                                          ++ cuttlefish_variable:filter_by_prefix("listener.http", Conf)
                            ])                              
end}.                     

%% Connect

%% Push Service Connect: Ip:Port

{mapping, "push_service.enable", "{{app}}.push_service", [
          {default, on},
          {datatype, flag}
]}.

{mapping, "push_service.connect", "{{app}}.push_service", [
          {datatype, ip}
]}.

{translation, "{{app}}.push_service", fun(Conf) ->
                  [{enable, cuttlefish:conf_get("push_service.enable", Conf)},
                  {connect, cuttlefish:conf_get("push_service.connect", Conf)}]                      
end}.

%% Patch hour data

{mapping, "patch_hour_data.enable", "{{app}}.patch_hour_data.enable", [
          {default, on},
          {datatype, flag}
]}.

%% Hour Data Push Connect: Ip:Port

{mapping, "hour_data_push.enable", "{{app}}.hour_data_push", [
          {default, on},
          {datatype, flag}
]}. 

{mapping, "hour_data_push.connect", "{{app}}.hour_data_push", [
          {datatype, ip}
]}.

{translation, "{{app}}.hour_data_push", fun(Conf) ->
              [{enable, cuttlefish:conf_get("hour_data_push.enable", Conf)},
              {connect, cuttlefish:conf_get("hour_data_push.connect", Conf)}]
end}.


%% XML Data Push Connect: Ip:Port

{mapping, "xml_data_push.enable", "{{app}}.xml_data_push", [
          {default, on},
          {datatype, flag}
]}. 

{mapping, "xml_data_push.connect", "{{app}}.xml_data_push", [
          {datatype, ip}
]}.

{translation, "{{app}}.xml_data_push", fun(Conf) ->
              [{enable, cuttlefish:conf_get("xml_data_push.enable", Conf)},
              {connect, cuttlefish:conf_get("xml_data_push.connect", Conf)}]
end}.

%% Connector Client Request URL
{mapping, "connector_client_request.timeout", "{{app}}.connector_client_request", [
          {default, 500},
          {datatype, integer},
          {validators, ["positive_integer"]}
]}.

{mapping, "connector_client_request.task_priority", "{{app}}.connector_client_request", [
          {default, -20},          
          {datatype, integer},
          {validators, ["range:-20-20"]}
]}.

{mapping, "connector_client_request.url", "{{app}}.connector_client_request", [
          {datatype, string}
]}.

{translation, "{{app}}.connector_client_request", fun(Conf) ->
              [{timeout, cuttlefish:conf_get("connector_client_request.timeout", Conf)*1000},
              {task_priority, cuttlefish:conf_get("connector_client_request.task_priority", Conf)},
              {url, cuttlefish:conf_get("connector_client_request.url", Conf)}]
end}.



